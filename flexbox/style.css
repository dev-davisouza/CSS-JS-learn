/*What is flexbox? Flexbox, or the Flexible Box Layout, is a layout model in CSS that allows you to 
design complex layouts more efficiently and with less code than traditional models. Getting straight to 
the point, when you aplly the value flex to the CSS property display in a div.container by example its 
children will be a flex-items. But the children of the flex-items will not be flex-items too. */


/* Default box demonstration */
.normalbox {
    height: 250px;
    border: 3px solid red;
    margin-bottom: 60px;
}

.normalbox div {
    border: 2px solid orange;
    width: auto;
    margin: 15px;
}

/* Generic flexbox demonstration: */
.flexbox {
    height: 250px;
    border: 3px solid red;
    display: flex;
    margin-bottom: 60px;
}

.flex-basic div{
    width: 100%;
    border: 2px solid orange;
    margin: 10px;
}

.flex-basic p{
    border: 2px solid orange;
    margin: 10px;
    width: fit-content;
}

.flex-container-wrapped{
    padding: 10px;
    flex-wrap: wrap; /*The elements of the container can broke the line (by default they can't.) */
}

.flex-container-wrapped div{
    width: 100%;
    border: 2px solid orange;
    margin: 10px;
}

.flex-container-column{
    padding: 10px;
    /*Bro listen, In the Flexbox layout, the items align in rows (the same of default flow of the document), 
    but as you can see they occuppy all height available. The point is - i can organize the items not only as 
    a row, but as a column too.*/
    flex-direction: column;  
}

.flex-container-column div {
    margin-bottom: 5px;
    border: 2px solid orange;
    /*As you can see in the flexbox i just can change the width occuped by an element if it fits in it 
    container (when the flex-direction is row), so, if you try to set the div width as 7000px, it will respect 
    his parent, but bro, it's larger than practically all monitors in this world!*/
}

/*
The justify-content property in CSS is used to align the items (flex items) inside a flex container along the 
main axis. It works only on flex containers. The main axis is determined by the flex-direction property, which 
can be either row, row-reverse, column, or column-reverse.

The justify-content property has several values, each affecting the alignment of flex items in different ways:

    1.flex-start (default):
        This aligns items to the start of the container. In a row layout, it aligns items to the left. In a 
        column layout, it aligns items to the top.

    2.flex-end:
        This aligns items to the end of the container. In a row layout, it aligns items to the right. In a 
        column layout, it aligns items to the bottom.
    
    3.center:
        This centers the items within the container along the main axis.

    4.space-between:
        This evenly distributes the items along the main axis, leaving equal space between them. The first item 
        is at the start, and the last item is at the end.

    5.space-around:
        This evenly distributes the items along the main axis, but it also adds equal space on both sides of 
        each item. So, there is space before the first item and after the last item as well.

    6.space-evenly:
        This evenly distributes the items along the main axis, and it also adds equal space around them. This 
        means there is space before the first item, between each pair of items, and after the last item.

    These values are applied to the flex container, and they affect the positioning of its child items along 
    the main axis. It's important to note that if there is only one item in the container, justify-content has 
    no effect, as there is no available space to distribute.
*/

/* horizontal alignment: */
.content-justified-space-between{
    justify-content: space-between;
}

.content-justified-space-around{
    justify-content: space-around;
}

.content-justified-space-evenly{
    justify-content: space-evenly;
}

/* Vertical alignment: */
.content-align{
    align-content: center;
}