/*
The concept of variables in CSS is the same as in any other language, it's a statement that sets
an address in the RAM. Once declared, it can be used in the document. Today (20/04/2024) I will
work with variables and the function calc() (It is not the first time I've worked with these 
things neither in CSS nor in any other language). Then, let's start it!

In CSS i cant set vars (variables) outside a selector, so, by default, is recommended for the
developers to set them inside of the :root pseudo-class insted of directly html tag, despite
being the parent of the parent of all tags!

In CSS, both :root and the html tag can be used to define CSS variables. However, :root is 
typically preferred for a few reasons:

    1. Specificity: The :root pseudo-class has higher specificity compared to the html selector. 
       This means that styles defined within :root will override styles defined in other parts of 
       the CSS more easily, providing better control and flexibility.

    2. Convention: Using :root has become a convention in modern CSS development. It signifies that 
       the variables defined within :root are intended to be global and accessible throughout the 
       entire document.

    3. Clarity: Using :root makes it clear that you're defining global variables for the entire 
       document, whereas styling the html tag might be confused with styling the HTML structure itself.

Overall, while both methods technically work, using :root is considered best practice for defining 
global CSS variables in modern web development
*/

:root {
/*Set the variables :D*/
    --header-height: 10rem;
    --main-color: rgba(255, 0, 0, .8);
}

html {
    font-size: 62.5%;
}

html,
body {
    margin: 0;
    padding: 0;
}

.fixed-header-demo {
    width: 100%;
    background-color: var(--main-color);
    height: var(--header-height);
    font-size: 2rem;
    position: fixed;
    top: 0;
}

.full-vh-main {
    min-height: calc(100vh - var(--header-height));
    background-color: #ccc;
    font-size: 2rem;
    margin-top: var(--header-height);
}

/*
Note that when i use vars istead of hard values, i don't need to change all code manually.
With vars i just need to change it value in the root, and automatically all this will be
reflected in the entire code whose use the var, like the class full-vh-main, which handle
the height of the header with position fixed, 'cause subtract the full vh with the --header-height
variable.
*/

.simple-footer {
    height: 10rem;
    font-size: 2rem;
    background-color: var(--main-color)
}

/*From now on I can make an ellipse!üëçüèø*/
.black-ellipse {
    background-color: black;
    max-width: 50%;
    min-height: 20rem;
    color: white;
    border-radius: 100%/100%;
    text-align: center;
}

/*
Now (21-04-2024) we'll be working with box-shadow, it is little bit hard to understand, but is
possible!

The property 'box-shadow' in CSS receives a set of values which defines the style of the shadow
applied to an element. The allow values are:

    1. offset-x: It sets the horizontal displacement of the shadow. A positive number moves the 
       shadow to the right, while o negative number move it to the left.
    2. offset-y: It sets the vertical displacement of the shadow. A positive number moves the
       shadow to the bottom, while a negative number move it to top.
    3. blur-radius: It set the blur of the shadow. How bigger the value, more diffuse will be the
       shadow. A value 0 means that the shadow will have sharp edges(border).
    4. spread-radius: It set the extension or contracting of the shadow. A positive number increases
       the size of the shadow, while a negative number reduce it.
    5. color: It set the color of the shadow. It can be specified with any CSS valid color format,
       like color name, hexadecimal code, RGB, RGBA, HSL or HSLA.
       */ 

.white-shadow {
    box-shadow: ;
}