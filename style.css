/*Basically, the CSS style your HTML tags. 
By default the tags already have a style, so, the CSS serves to change this standart style for any 
other style that you want.*/

/*You can style the tags directly.*/
body{
    font-family: 'Times New Roman', Times, serif; /*This sets the fonts that 
    browsers will loads the texts.*/
    margin: 10px 30px; /*This fills with spaces outside the element.*/
}

/*
In CSS you can aplly styles for an especific element, not just tags. This way of applying styles is 
called 'class'. In this way you can add the CSS properties that you set in your CSS file for a purpose
or more. Therefore you can set a name for this class, and you can set properties that you want to 
make.  
*/

.styled-h1{ /*This is a class*/
    background-color: blueviolet;
    width: max-content; /*The value 'max-content' allows the element to occupy
    all space in the box content.*/

    padding: 10px 90px; /*This fills with spaces inside the element.*/
    margin: auto; 
    margin-bottom: 0px;

    /*The first thing you need to know is that the border creates an edge 
    inside the element.
    If you use just the attr 'border: value;', you can use many dif values -
    color, style, and width (idk if you can apply more dif values). But this
    is very simple, and i believe that is better for a project to use specifics
    attrs - like these below. I hope thus the maintenance will be better.*/

    border-radius: 10px; /*This rounds the edge(border)*/
    border-style: inset; /*this stylizes the border*/
    border-color: gray; /*This sets the color of the border*/
    border-width: 5px; /*This sets the border thickness.*/
    
}

/*This thing below is a pseudo-class, and allow you to change the CSS properties that you want to 
aplly in an element when some events happens on the element. It's as a special state of the element

Pseudo-classes are used to style elements based on their current state or position, such as when an 
element is being hovered over, clicked, or the first child of its parent. Pseudo-classes are denoted 
by a colon (:) followed by the name of the pseudo-class. Here are some examples:

    :hover - selects and styles an element when the user hovers over it:

        a:hover {
        color: red;
        }

    :active - selects and styles an element while it is being activated (clicked):

        button:active {
        background-color: #00ff00;
        }

    :first-child - selects and styles the first child element of a parent:

        li:first-child {
        font-weight: bold;
        }

    :nth-child(n) - selects and styles the nth child element of a parent.

        p:nth-child(2) {
        color: blue;
        }

These are just a few examples, and there are many more pseudo-classes available in CSS. They provide a 
way to apply styles based on various conditions, enhancing the flexibility and control over the 
appearance of web pages. */

.styled-h1:hover{
    border-style: outset;
}

.h2{
    width: fit-content; /*The value 'fit-content' restricts the element to occupy
    just the necessary space to displays the content in the box content. 
    It's the opposite of his brother 'max-content'*/

    background-color: cadetblue;
    margin: 10px; 
    padding: 10px 90px; 

    /*So, the attr outline, unlike of your brother 'border', sets an edge(border)
    outside the element. 
    The outline is an problematic attr, 'cause its dont respect the father element, i guess.
    So, my consel is: Avoid to use outline!*/
    
    outline-width: 100px 200px;
    outline-style: inset;
    outline-offset: 100px; /*This sets the distance between the content and the outline.*/
}

.h1-boxado{
    /*Listen, by default, the box content expands according to the quantity of content that an 
    element contains, it means that the content is the limit. In other words, if you set a width
    with 450px of limit, but you set 25px of padding and border, the size of the padding and border
    will add to the width more 50px and the final sum will be 500px of box size in the width. But 
    of course in the life will have situations that is not interesting that it occurs. 
    In CSS exists many ways to solve this problem. One of them is the box-sizing.*/

    box-sizing: border-box; /*The border-box value resricts the size of the element, making the 
    content adapts to the width. It means that the total size of the element is calculated including 
    padding and border. This means that if you add padding or a border to an element, it will not 
    increase its total size, but rather adjust the size of the content.  */
}

/*Bro, listen: In CSS we have elements that are represented as a block. All blocks gerenerates a line-
break - <p>, <h1>, <ul> <li>, and so farth. These elementes recieves the box-model attrs, like padding 
and height. So, yes, probably you thinking the same thing that i'm thinking; the CSS haves elements 
that are not represented as a block; these elements are called as inline elements, because they can 
format a portion of texts in the block elements. They are: <em>, <strong>, <a> and so on. And they 
don't generates linebreaks and of course don't behaves as block, because they don't recives the box-
model attrs. Also, they just takes the width that is necessary to displays the content(it's like fit-
content), unlike block elements that takes all width inherited by your father element. although, CSS 
is a beautiful world. And you can change who is a block and who is an inline element. So, how? 
Behold the property display to do this!*/

.h1-inline {
    display: inline; /*By default the tag h1 is displayed as a block, not inline.*/
}

/*The tag <a>, for being a link, has a "clickable area". The padding can increase this "clickable 
area", so looks at this below:*/

.a-increased{
    padding: 100px;
    /*It's crazy how this happens. Because the padding can fill the sides, but not the height, however
    the "clickable area" was increased in the height too. But avoid to use this class.*/
}

/*
The display property in CSS determines how an HTML element should be displayed on the page. It can 
take various values, each affecting the layout and behavior of the element differently. Here's a brief 
overview of some common values for the display property:

    block:
        - The element generates a block-level container.
        - It starts on a new line and takes up the full width available.
        - Example: <div>, <p>, <h1>.

    inline:
        - The element generates an inline-level container.
        - It does not start on a new line and only takes up as much width as necessary.
        - Example: <span>, <a>, <strong>.

    inline-block:
        - Similar to inline, but the element can have a width and height, and it behaves as a block-
        level element regarding box model.
        - It does not start on a new line.
        - Example: Often used when you want inline elements to have block-level properties.

    none:
        - The element is not displayed.
        - The space it would have occupied is collapsed.
        - It's as if the element doesn't exist in the layout.
        - Example: Useful for hiding elements dynamically with JavaScript.

    table:
        - The element behaves like a table element (e.g., <table>).
        - It will behave like a block-level element but will also define a table structure.
        - Example: <table>, <thead>, <tbody>.

    flex:
        - The element becomes a flexible container, and child elements become flexible items inside it.
        - It enables the use of the flexbox layout model for the container and its children.
        - Example: Used for creating flexible, responsive layouts.

    grid:
        - The element becomes a grid container, and child elements become grid items inside it.
        - It enables the use of the grid layout model for the container and its children.
        - Example: Used for creating grid-based layouts.

    inline-flex and inline-grid:
        - Similar to flex and grid, respectively, but the container is an inline-level container.
*/
.bordera {
    padding: 5px;
    color:rgb(1, 1, 122);
    background-color: darkgray;
    border-bottom: 2px solid blue;
}

.grafite{
    color: rgb(48, 48, 48);
}